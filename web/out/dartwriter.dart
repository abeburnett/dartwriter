// Auto-generated from index.html.
// DO NOT EDIT.

library dartwriter;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'document_item.html.dart';
import 'dart:html' hide Document;
import 'package:web_ui/web_ui.dart';
import '_from_packages/dartwriter/document.dart';


// Original code




final __changes = new __observe.Observable();

Document __$activeDocument = new Document('Hello Codelab!', 'Try typing in this document!');
Document get activeDocument {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'activeDocument');
  }
  return __$activeDocument;
}
set activeDocument(Document value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'activeDocument',
        __$activeDocument, value);
  }
  __$activeDocument = value;
}

bool __$contentActive = true;
bool get contentActive {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'contentActive');
  }
  return __$contentActive;
}
set contentActive(bool value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'contentActive',
        __$contentActive, value);
  }
  __$contentActive = value;
}

String get sidebarClass => contentActive ? '' : 'active';
String get mainClass => contentActive ? 'active' : '';

/// An observed list of documents
final List<Document> documents = toObservable([]);

/// Create a document
void createDocument(){
  // Create a new document
  var doc = new Document('Untitled', '');
  documents.add(doc);
  selectDocument(doc);
}

/// Delete a document
void deleteDocument(Document doc){
  documents.remove(doc);


}

/// Select a document
void selectDocument(Document doc, {bool markActive: false}) {
  if (documents.isEmpty){
    activeDocument = null;
  } else if (doc != null && documents.contains(doc) && doc != activeDocument){
    // change active document
    activeDocument = doc;
  } else if (activeDocument != null && documents.contains(activeDocument)){
    // stay on the active document and display the editing window
    contentActive = markActive && doc == activeDocument;
  } else {
    // fall back to the last document
    activeDocument = documents.last;
  }
}

/// Starts the application
void main(){

  /// Create a new document if there are none
  if (documents.isEmpty) createDocument();

  /// Select the first document in the list of documents
  selectDocument(documents.first);


}

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.Element.html('<div is="x-document-item"></div>'), __html1 = new autogenerated.Element.html('<div class="title">\n                <!-- Button to go back to document list.\n                    Only visible in a small viewport. -->\n                    <button>&lt;</button>\n\n                <!-- Document title -->\n                <div class="input-wrap">\n\n\n                    <input type="text">\n                </div>\n            </div>'), __html2 = new autogenerated.Element.html('<textarea class="content"></textarea>'), __html3 = new autogenerated.Element.html('<div class="footer"></div>');
  var __e0, __e10, __e11, __e2, __e3;
  var __t = new autogenerated.Template(__root);
  __e3 = __root.nodes[1];
  __e0 = __e3.nodes[1].nodes[1];
  __t.listen(__e0.onClick, ($event) { createDocument(); });
  __e2 = __e3.nodes[3].nodes[3];
  __t.loop(__e2, () => documents, ($list, $index, __t) {
    var doc = $list[$index];
    var __e1;
    __e1 = __html0.clone(true);
    __t.oneWayBind(() => doc, (e) { if (__e1.xtag.doc != e) __e1.xtag.doc = e; }, false, false);
    __t.component(new DocumentItem()..host = __e1);
  __t.addAll([new autogenerated.Text('\n\n                '),
      __e1,
      new autogenerated.Text('\n            ')]);
  });
  __t.bindClass(__e3, () => sidebarClass, false);
  __e11 = __root.nodes[5];
  __e10 = __e11.nodes[3];
  __t.conditional(__e10, () => activeDocument != null, (__t) {
    var __e4, __e5, __e6, __e7, __e9;
    __e6 = __html1.clone(true);
    __e4 = __e6.nodes[3];
    __t.listen(__e4.onClick, ($event) { contentActive = false; });
    __e5 = __e6.nodes[7].nodes[1];
    __t.listen(__e5.onInput, ($event) { activeDocument.title = __e5.value; });
    __t.oneWayBind(() => activeDocument.title, (e) { if (__e5.value != e) __e5.value = e; }, false, false);
    __e7 = __html2.clone(true);
    __t.listen(__e7.onInput, ($event) { activeDocument.content = __e7.value; });
    __t.oneWayBind(() => activeDocument.content, (e) { if (__e7.value != e) __e7.value = e; }, false, false);
    __e9 = __html3.clone(true);
    var __binding8 = __t.contentBind(() => activeDocument.wordCount, false);
    __e9.nodes.addAll([new autogenerated.Text('\n                '),
        new autogenerated.Text('\n                '),
        __binding8,
        new autogenerated.Text('\n\n            ')]);
  __t.addAll([new autogenerated.Text('\n\n            '),
      __e6,
      new autogenerated.Text('\n\n            '),
      __e7,
      new autogenerated.Text('\n\n            '),
      __e9,
      new autogenerated.Text('\n        ')]);
  });

  __t.bindClass(__e11, () => mainClass, false);
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=dartwriter.dart.map